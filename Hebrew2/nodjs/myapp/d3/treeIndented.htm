<!DOCTYPE html>
<html>
<head>
  <TITLE>indent</TITLE>    
  <META http-equiv="Content-Type" content="text/html;" charset="UTF-8">
    <META name="viewport" content="width=device-witdh, initial-scale=1, maximum-scale=1, user-scale=0">
<style>

.node rect {
  cursor: pointer;
  fill: #fff;
  fill-opacity: 0.5;
  stroke: #3182bd;
  stroke-width: 1.5px;
}

.node text {
  font: 18px Times New Roman;/*sans-serif;*/
  pointer-events: none;
}

.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

</style>
<body>


<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>


<div id="draggableMenu">
<style type="text/css">
 #draggableMenu{
  position: fixed;

  background-color: #aaffff;

} 
</style>
<script>
  $( function() {/////////////////
    $( "#draggableMenu" ).draggable();


    $("#txmod").change(function(){
        g_txtMod=$(this).val();
        LoadTree();
    });
  });//////////////////////////////
var Uti={

  searchNodeName:function(node, name){

    if(node.name===name)return node;
    if(!node.children) return null;
    for(var i=0;i<node.children.length;i++){
      var child=node.children[i];
      var find=this.searchNodeName(child, name);
      if(find)return find; 
    }
    return null;
  }
}

</script>
  <a href='http://localhost/~weiding/weidroot/weidroot_2017-01-06/app/btool/tool/Hebrew2/nodjs/myapp/d3/tree.htm'>localhost</a>

  <a href='http://localhost/~weiding/weidroot/weidroot_2017-01-06/app/jit/test1/ood3/circlePacking/tree.html'>sample</a>

  <a href="../oStrongCodeTable_Merged.htm" target="_blank">Merged.htm</a><br>
 
 <select id="txmod">
  <option value="eng">English</option>
  <option value="root">root</option>
 <option value="RotPoS">RotPoS</option>   
 <option value="all">all</option>   

 </select>
</div>



<script>
var g_lrm="";
$(document).ready(function(){ 
  g_lrm=$("<a>&lrm;</a>").text();
});
var g_txtMod="eng";
function display_text(d){
  switch(g_txtMod){
    case "eng": return display_text_eng(d);
    case "root": return display_text_root(d);
    case "RotPoS": return display_text_RotPoS(d);
    case "all": return display_text_all(d);
  }
}
function display_text_eng(d){
  var eng=(d.english?d.english:"");
  var heb=g_lrm+(d.hebrew?d.hebrew:"")+g_lrm;
  var s=""+d.name+" "+heb+" "+eng;
  return s;
}
function display_text_root(d){
  var rot=(d.root?d.root:"");
  var heb=g_lrm+(d.hebrew?d.hebrew:"")+g_lrm;
  var s=""+d.name+" "+heb+" "+rot;
  return s;
}
function display_text_RotPoS(d){
  var eng=(d.english?d.english:"");
  var rot=(d.root?d.root:"");
  var PoS=(d.PoS?d.PoS:"");
  var heb=g_lrm+(d.hebrew?d.hebrew:"")+g_lrm;
  var s=""+d.name+" "+heb+" "+rot+" | "+PoS;
  return s;
}
function display_text_all(d){
  var eng=(d.english?d.english:"");
  var rot=(d.root?d.root:"");
  var PoS=(d.PoS?d.PoS:"");
  var heb=g_lrm+(d.hebrew?d.hebrew:"")+g_lrm;
  var s=""+d.name+" "+heb+" "+rot+" | "+PoS+" | "+eng;
  return s;
}
function click_text(d){
    var sid=d.name;
    alert(sid);
}
</script>




<script>

var margin = {top: 30, right: 20, bottom: 30, left: 20},
    width = 1960,
    barHeight = 20,
    barWidth = (width - margin.left - margin.right) * 0.8;

var i = 0,
    duration = 10,
    m_root;

var diagonal = d3.linkHorizontal()
    .x(function(d) { return d.y; })
    .y(function(d) { return d.x; });

var svg = d3.select("body").append("svg")
    .attr("width", width) // + margin.left + margin.right)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


LoadTree();


function LoadTree(){
  d3.json("flare.json", function(error, flare) {
    if (error) throw error;
    m_root = d3.hierarchy(flare);
    m_root.x0 = 0;
    m_root.y0 = 0;
    update(m_root);
  });
  ///following codes can erase text, but not reflesh text.
  //      var ge = svg.selectAll("text")
  //      .data(m_root,function(d) { return d.id || (d.id = ++i); });
  //
  //      ge.exit().remove();
  //
  //      ge.enter()
  //      .data(m_root)
  //        .attr("dy", 3.5)
  //        .attr("dx", 5.5)
  //        .text(function(d) { //weid
  //      return display_text(d.data);
  //      return d.data.name; });
  //
  //      update(m_root);        //return;
}
function update(source) {

  // Compute the flattened node list.
  var nodes = m_root.descendants();

  var height = Math.max(500, nodes.length * barHeight + margin.top + margin.bottom);

  d3.select("svg").transition()
      .duration(duration)
      .attr("height", height);

  d3.select(self.frameElement).transition()
      .duration(duration)
      .style("height", height + "px");

  // Compute the "layout". TODO https://github.com/d3/d3-hierarchy/issues/67
  var index = -1;
  m_root.eachBefore(function(n) {
    n.x = ++index * barHeight;
    n.y = n.depth * 20;
  });

  // Update the nodes…
  var node = svg.selectAll(".node")
    .data(nodes, function(d) { return d.id || (d.id = ++i); });

  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .style("opacity", 0);

  // Enter any new nodes at the parent's previous position.
  nodeEnter.append("rect")
      .attr("y", -barHeight / 2)
      .attr("height", barHeight)
      .attr("width", barWidth)
      .style("fill", color)
      .on("click", click);

  nodeEnter.append("text")
      .attr("dy", 3.5)
      .attr("dx", 5.5)
      .text(function(d) { //weid
        return display_text(d.data);
        return d.data.name; });

  // Transition nodes to their new position.
  nodeEnter.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1);

  node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1)
    .select("rect")
      .style("fill", color);

  // Transition exiting nodes to the parent's new position.
  node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .style("opacity", 0)
      .remove();

  // Update the links…
  var link = svg.selectAll(".link")
    .data(m_root.links(), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  m_root.each(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}
var m_depthArr=["#cccccc", "#3182bd","green","#bd3182","#fd8d3c","#dec78e","#c6dbef","#eedddd","black",];
function color(d) {
  return m_depthArr[d.depth];
  return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
}

</script>